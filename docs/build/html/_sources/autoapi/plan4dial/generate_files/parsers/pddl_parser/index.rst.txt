:py:mod:`plan4dial.generate_files.parsers.pddl_parser`
======================================================

.. py:module:: plan4dial.generate_files.parsers.pddl_parser

.. autoapi-nested-parse::

   This module contains all the files necessary to convert from the HOVOR
   configuration to PDDL. This PDDL is later used to generate the controller/tree
   that determines how the conversation is navigated.

   Authors:
   - Rebecca De Venezia



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   plan4dial.generate_files.parsers.pddl_parser._get_is_fflag
   plan4dial.generate_files.parsers.pddl_parser._return_flag_value_fluent
   plan4dial.generate_files.parsers.pddl_parser._return_certainty_fluents
   plan4dial.generate_files.parsers.pddl_parser._fluents_to_pddl
   plan4dial.generate_files.parsers.pddl_parser.get_precond_fluents
   plan4dial.generate_files.parsers.pddl_parser.get_update_fluents
   plan4dial.generate_files.parsers.pddl_parser._action_to_pddl
   plan4dial.generate_files.parsers.pddl_parser._actions_to_pddl
   plan4dial.generate_files.parsers.pddl_parser.get_init_fluents
   plan4dial.generate_files.parsers.pddl_parser._parse_predicates
   plan4dial.generate_files.parsers.pddl_parser.parse_to_pddl



Attributes
~~~~~~~~~~

.. autoapisummary::

   plan4dial.generate_files.parsers.pddl_parser.TAB


.. py:data:: TAB
   

   

.. py:function:: _get_is_fflag(context_variables: Dict, v_name: str) -> bool

   Determines if the provided variable has a "known" setting of type fflag.

   Args:
   - context_variables (Dict): The configuration of all context variables.
   - v_name (str): The name of the variable.

   Returns:
   - (bool): Indicates if the provided variable has a "known" setting of type
   fflag.


.. py:function:: _return_flag_value_fluent(v_name: str, is_fflag: bool, value: Union[bool, str]) -> str

   Returns the fluent version of a flag or fflag context variable depending
   on the setting supplied.

   Args:
   - v_name (str): The name of the variable.
   - is_fflag (bool): Describes if the variable is of type fflag, in which
   case the "maybe" option can be considered.
   - value (bool or str): The value setting of this context variable.

   Returns:
   - (str): The fluent version of a flag or fflag context variable depending
   on the setting supplied.


.. py:function:: _return_certainty_fluents(v_name: str, is_fflag: bool, certainty: str) -> List[str]

   Returns the fluent version of the certainty setting of a context variable
   depending on the setting supplied.

   Args:
   - v_name (str): The name of the variable.
   - is_fflag (bool): Describes if the variable's "known" type is fflag, in
   which case the "Uncertain" option can be considered.
   - certainty (str): The certainty setting of this context variable.

   Returns:
   - (List[str]): The list of fluents that reflect the certainty setting for
   the context variable supplied.


.. py:function:: _fluents_to_pddl(fluents: List[str], tabs: int, name_wrap: str = None, and_wrap: bool = False, outer_brackets: bool = True) -> str

   Converts a list of fluents to PDDL. Adds tabs, outer brackets, names and
       "and" wraps as appropriate.

       Args:
       - fluents (List[str]): A list of the string versions of the fluents.
       - tabs (int): The "base" indentation of the fluents.
       - outer_brackets (bool. optional): Setting to wrap the final statement
       with outer brackets, i.e. (outcome ...) Defaults to True.
       - name_wrap (str, optional): Setting to wrap fluents with a name, i.e.
       ":predicates". Defaults to None.
       - and_wrap (bool, optional): Setting to wrap fluents with an "and", i.e.
       :precondition
   (and
           (...)). Defaults to False.

       Returns:
       - (str): The converted PDDL fluents.



.. py:function:: get_precond_fluents(context_variables: Dict, conditions: List[Union[str, bool]]) -> Set[str]

   Convert an action precondition to PDDL fluents.

   Args:
   - context_variables (Dict): The configuration of all context variables.
   - conditions (List[Union[str, bool]]): The conditions to be converted.

   Returns:
   - Set[str]: The set of converted fluents.


.. py:function:: get_update_fluents(context_variables: Dict, updates: Dict) -> Set[str]

   Converts the update configuration of an action outcome to PDDL fluents.

   Args:
   - context_variables (Dict): The configuration of all context variables.
   - updates (Dict): The update configuration.

   Returns:
   - outcomes (Set[str]): The set of fluents that were added by the outcome update.


.. py:function:: _action_to_pddl(context_variables: Dict, act: str, act_config: Dict) -> str

   Converts an action from the YAML configuration to PDDL.

   Args:
   - context_variables (Dict): The configuration of all context variables.
   - act (str): The action name.
   - act_config (Dict): The action configuration.

   Returns:
   - (str): The converted action.


.. py:function:: _actions_to_pddl(loaded_yaml: Dict) -> str

   Converts actions from the YAML to PDDL format.

   Args:
   - loaded_yaml (Dict): The loaded YAML configuration.

   Returns:
   - (str): The converted actions.


.. py:function:: get_init_fluents(context_variables: Dict) -> Tuple[Set[str], Set[str]]

   Convert the initial state of context variables to a PDDL initial state.

   Args:
   - context_variables (Dict): The configuration of all context variables.

   Returns:
   - init_true (Set[str]): The partial initial state, which indicates all fluents that
   are initially true. Used in the PDDL.
   - init_complete (Set[str]): The complete initial state, which indicates the state of
   all fluents in the initial state. Used by the rollout configuration.


.. py:function:: _parse_predicates(context_variables: Dict) -> List[str]

   Converts the context variables to PDDL predicates.

   Args:
   - context_variables (Dict): The configuration of all context variables.

   Returns:
   - predicates (List[str]): The collection of converted predicates.


.. py:function:: parse_to_pddl(loaded_yaml: Dict) -> Tuple[str, str]

   Converts the loaded YAML file to a PDDL specification.

   Args:
   - loaded_yaml (Dict): The loaded YAML configuration.

   Returns:
   - domain (str): The generated PDDL domain.
   - problem (str): The generated PDDL problem.


