---
version: "3.1"
name: order-pizza

# to extract from the user. defines what each variable can hold
# also defines examples for rasa to use
# types available:
#   flag
#       can set to T/F init
#   fflag (fuzzy flag -- yes, no, maybe)
#       can set to T/F/M (maybe) init
#   enum
#   json
context-variables:
  # order:
  #   type: enum
  #   known:
  #     type: fflag
  #     init: false
  #   options:
  #     cheese:
  #       variations:
  #       - chz
  #       - cheez
  #       - mozzarella
  #       - fromage
  #       - cheesy
  #     pepperoni:
  #       variations:
  #       - peperoni
  #       - meat
  #       - sausage
  #     mushroom:
  #       variations:
  #       - vegetable
  #       - veggie
  #       - musroom
  #       - shroom
  #     gluten free:
  #       variations:
  #       - healthy
  #       - gluten-free
  #       - gf
  #     hawaiian:
  #       variations:
  #       - pineapple
  #       - ham and pineapple
  #       - sweet
  # order_available:
  #   type: flag
  #   init: false
  start_location:
    type: json
    known: 
      type: fflag
      init: false
    examples:
    - New York
    - Denver
    - Tallahassee
    - Chicago
    - Austin
  end_location:
    type: json
    known: 
      type: fflag
      init: false
    examples:
    - New York
    - Denver
    - Tallahassee
    - Chicago
    - Austin
  # payment_method:
  #   type: enum
  #   known: 
  #     type: fflag
  #     init: false
  #   options: 
  #     credit:
  #       variations:
  #       - crdit
  #       - credit card
  #       - visa
  #       - mastercard
  #     debit:
  #       variations: 
  #       - dbit
  #       - debit card
  #       - chequing account
  #       - chequing
  #       - savings account
  #       - savings
  #     cash:
  #       variations:
  #       - money
  #       - notes
  # card_number:
  #   type: json
  #   known:
  #     type: fflag
  #     init: false
  #   extraction: regex
  #   pattern: \d{16}
  #   examples:
  #   - 1234567812345678
  #   - 9876543212345678
  goal:
    type: flag
    init: false

# combine with the context variables above to pass to rasa
# NOTE: deleted the | character which seems to convert the list to a single
# string (rasa uses this, not sure why though -- it parses much nicer without
# it).
intents:
  greet:
    utterances:
      - Hey
      - Hi
      - hey there
  leave:
    utterances:
      - Goodbye
      - Bye
      - That's all
      - i'm done
  confirm:
    utterances:
      - "yes"
      - yeah
      - that's it
      - "Y"
      - mhm
      - confirm
      - yes please
  deny:
    utterances:
      - "no"
      - not at all
      - that's not what i meant
      - absolutely not
      - i don't want that
      - nah
      - no thanks
      - no thank you
  share_order:
    # specify entities so we can ensure all examples use exactly these entities
    # (no more, no less)
    variables: 
      - order 
    utterances:
      - I want a $order pizza
      - $order pizza please!
      - Do you have $order pizza?
  share_location:
    variables:
      - start_location
      - end_location
    utterances:
      - Can you deliver from $start_location to $end_location?
      - I want my pizza to be delivered to $end_location from $start_location.
      - Do you travel from $start_location to $end_location?
  set_payment_method:
    variables:
      - payment_method
    utterances:
      - I want to pay by $payment_method.
      - Can I pay with $payment_method?
      - I will pay in $payment_method
  pay:
    variables:
      - card_number
    utterances:
      - My credit card number is $card_number.
      - This is my account number $card_number
      - Ok, the number on my card is $card_number.

responses:
  # created by default
  agent_fallback:
    - Sorry, I couldn't understand that input.
    - I couldn't quite get that.
  site_down_exit:
    - Pizza site is experiencing issues and was unable to make your request. Exiting...


# can set up template effect
template-effects:
  # general slot-fill effect created by default
  slot-fill:
    # parameters that the template can take
    parameters:
      - entity
      - valid-intent
      - valid-follow-up
    oneof:
      outcomes:
        # received a valid value
        valid:
          updates:
            (entity):
              value: $(entity)
              known: true
          intent: (valid-intent)
          follow_up: (valid-follow-up)
        unclear:
          updates:
            (entity):
              value: $(entity)
              known: maybe
  # general yes-no effect created by default
  yes-no:
    parameters:
      - entity
    oneof:
      outcomes:
        confirm:
          updates:
            entity:
              value: $entity
              known: true
          intent: confirm
        deny:
          updates:
            entity:
              known: false
              value: null
          intent: deny

actions:
  ask-location:
    type: dialogue
    subtype: dialogue disambiguation 
    message_variants:
      - Where are you located?
      - Where do you live?
      - Where would you like to deliver?
    condition:
      start_location:
        known: false
      end_location:
        known: false
    effect:
      validate-location:
        oneof:
          outcomes:
            # received a valid value
            valid:
              updates:
                start_location:
                  value: $start_location
                  known: true
                end_location:
                  value: $end_location
                  known: true
              intent: share_location
            # need to clarify the response
            # unclear_start_know_end:
            #   updates:
            #     start_location:
            #       value: $start_location
            #       known: maybe
            #     end_location:
            #       value: $end_location
            #       known: true
            # unclear_end_know_start:
            #   updates:
            #     start_location:
            #       value: $start_location
            #       known: true
            #     end_location:
            #       value: $end_location
            #       known: maybe
            # unclear_both:
            #   updates:
            #     start_location:
            #       value: $start_location
            #       known: maybe
            #     end_location:
            #       value: $end_location
            #       known: maybe
    # if supplied, creates a corresponding "clarify" action during parsing which 
    # assumes as a condition that the entities have their known attribute set
    # to maybe and the effect is the default confirm above
    # clarify:
    #   entities:
    #     - start_location
    #     - end_location
    #   message_variants:
    #     - Do you want to deliver from $start_location to $end_location?
      # entities:
      #   start_location:
      #     message_variants:
      #       - Do you want to deliver from $start_location?
      #   end_location:
      #     message_variants:
      #       - Do you want to deliver to $end_location?

  # ask for the user's order
  ask-order:
    type: dialogue
    subtype: dialogue disambiguation 
    message_variants:
      - What would you like to order?
      - What type of pizza would you like?
    condition:
      order:
        known: false
    effect:
      # unclear-intent would be decided by the executor based on the extraction
      # results/confidence
      slot-fill:
        entity: order
        valid-intent: share_order
        valid-follow-up: check-order-availability
        response: "Checking order availability..."
    clarify:
      entities: order
      message_variants:
        - Would you like to order $order?

# # add dialogue to outcome (response)
# # want to be able to add dialogue without explicitly updating variables (like an acknowledgement)
# # not handled by the planner

#   # ask for the user's payment method
#   ask-payment:
#     type: dialogue
#     subtype: dialogue disambiguation 
#     message_variants:
#       - How would you like to pay?
#     condition:
#       order:
#         known: true
#       start_location:
#         known: true
#       end_location:
#         known: true
#       payment_method:
#         known: false
#     effect:
#       slot-fill:
#         entity: payment_method
#         valid-intent: set_payment_method
#     clarify:
#       entity: payment_method
#       message_variants:
#         - Would you like to pay with $payment_method?

#   # ask for the user's card
#   ask-card-number:
#     type: dialogue
#     subtype: dialogue disambiguation 
#     message_variants:
#       - Enter your card number.
#       - Please enter your card details.
#     condition:
#       payment_method:
#         known: true
#         options:
#           - credit
#           - debit
#     effect:
#       slot-fill:
#         entity: card_number
#         valid-intent: pay

#   check-order-availability:
#     type: api
#     call:
#       endpoint: pizza.actions.check_order_availability
#       initial_payload: {}
#     condition:
#       order:
#         known: true
#     effect:
#       make-call:
#         oneof:
#           outcomes:
#             in-stock:
#               updates:
#                 order_available:
#                   value: true
#               variable_list: []
#               # status of the call (helps determine the outcome similar to intent)
#               status: success 
#             out-of-stock:
#               updates:
#                 order:
#                   known: false
#                   value: null
#               follow_up: ask-order
#               variable_list: []
#               status: success
#             site-down:
#               response: site_down_exit
#               variable_list: []
#               status: 404

#   place-order:
#     type: api
#     call:
#       endpoint: pizza.actions.place_order # make the call
#       initial_payload: {}
#     condition:
#       # or:
#       order:
#         known: true
#       card_number:
#         known: true
#       order_available:
#         value: true
#         # TODO: the planner has no notion of what values things hold. this would need to be handled
#         # with a separate intent/flag setting.
#         # payment_method:
#         #   options: cash
#     effect:
#       make-call:
#         oneof:
#           outcomes:
#             success:
#               updates:
#                 goal:
#                   value: true
#                 ask-location:
#                   can-do: false
#                 ask-order:
#                   can-do: false
#                 ask-payment:
#                   can-do: false
#                 ask-card-number:
#                   can-do: false
#                 check-order-availability:
#                   can-do: false
#               variable_list: []
#               status: success
#               response: "Order was successfully placed!"
#             site-down:
#               variable_list: []
#               response: site_down_exit
#               status: 404

...